{"name":"Inline Attachment","tagline":"Embed images inside textareas","body":"Adds upload functionality to a textarea or CodeMirror instance by either drag-dropping or pasting (only in chrome) an image inside it.\r\n\r\nIt mimics the comment system on issues which is used on Github.\r\n\r\n![demo](https://f.cloud.github.com/assets/21/678/248aac6a-40a2-11e2-9a76-fd59ded28bbe.gif)\r\n\r\n## Download\r\n\r\nThe most recent minified versions can be found [here](http://data.razko.nl/projects/inlineattachment/latest/)\r\n\r\n## Usage\r\n\r\n__Configuration__\r\n\r\nAll versions can be configured using the following options:\r\n\r\n```javascript\r\n{\r\n    /**\r\n     * URL which handles the data\r\n     */\r\n    uploadUrl: 'upload_attachment.php',\r\n\r\n    /**\r\n     * Name of the POST field where the file will be sent.\r\n     * Defaults to 'file'.\r\n     */\r\n    uploadFieldName: 'file',\r\n\r\n    /**\r\n     * Name of the field from the response where the file can be downloaded.\r\n     * Defaults to 'filename'\r\n     */\r\n    downloadFieldName: 'file',\r\n\r\n    // List of allowed MIME types\r\n    allowedTypes: [\r\n        'image/jpeg',\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/gif'\r\n    ],\r\n\r\n    /**\r\n     * Will be inserted on a drop or paste event\r\n     */\r\n    progressText: '![Uploading file...]()',\r\n\r\n    /**\r\n     * When a file has successfully been uploaded the last inserted text\r\n     * will be replaced by the urlText, the {filename} tag will be replaced\r\n     * by the filename that has been returned by the server\r\n     */\r\n    urlText: \"![file]({filename})\",\r\n\r\n    /**\r\n     * When a file is received by drag-drop or paste\r\n     *\r\n     * @param {Blob} file\r\n     */\r\n    onReceivedFile: function(file) {},\r\n\r\n    /**\r\n     * When a file has succesfully been uploaded\r\n     *\r\n     * @param {Object} json JSON data returned from the server\r\n     */\r\n    onUploadedFile: function(json) {},\r\n\r\n    /**\r\n     * Custom error handler. Runs after removing the placeholder text and before the alert().\r\n     * Return false from this function to prevent the alert dialog.\r\n     *\r\n     * @return {Boolean} when false is returned it will prevent default error behavior\r\n     */\r\n    customErrorHandler: function() { return true; },\r\n\r\n    /**\r\n     * Custom upload handler, must return false to prevent default handler.\r\n     * Can be used to send file via custom transport(like socket.io)\r\n     *\r\n     * @param {Blob} file\r\n     * @return {Boolean} when false is returned it will prevent default upload behavior\r\n     */\r\n    customUploadHandler: function(file) { return true; },\r\n\r\n    /**\r\n     * Error message for default error handler\r\n     */\r\n    errorText: \"Error uploading file\"\r\n}\r\n```\r\n\r\n__jQuery__\r\n\r\n```javascript\r\n$('textarea').inlineattach(options);\r\n```\r\n\r\n__CodeMirror__\r\n\r\n```javascript\r\nvar editor = CodeMirror.fromTextArea(document.getElementById(\"textarea_editor\"));\r\ninlineAttach.attachToCodeMirror(editor, options);\r\n```\r\n\r\n__Input field__\r\n\r\n```javascript\r\ninlineAttach.attachToInput(document.getElementById('inputfield'), options);\r\n```\r\n\r\n__Handling image uploads__\r\n\r\nThe Demo folder contains an example in PHP on how to handle uploads.\r\n\r\n## Build\r\n\r\nTo build the project you need node, npm and grunt installed. These tools can be installed on Ubuntu as follows:\r\n\r\nFollow the Node.js guide: [Node.js installation](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)\r\n\r\nGo to the project folder and run the following:\r\n\r\n```sh\r\nnpm install\r\ngrunt\r\n```\r\n\r\nThis should build the project and the files will appear in the `dist/` folder\r\n\r\n## Changelog\r\n\r\n[See Github releases](https://github.com/Rovak/InlineAttachment/releases)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}